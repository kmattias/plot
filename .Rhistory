outdir="data/")
# if no end date given, set to now
end <- ifelse(is.null(end), format(now(), "%m/%Y"), end)
# takes start & end in mm/yyyy, tries to dwnld files
# make url func only avail within get_data
make_url <- function(date) {
urls <- paste0(base_url, format(date, "%Y_%m"), ".csv")
return(urls)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
end_date <- lubridate::myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
#lapply (a,b) just applies func b to seq a and returns list
# of the modififed sequence
urls <- lapply(date_range, make_url, base_url=base_url)
# for loops can be easier for early development
# u can be any letter, x or first letter common
# for(u in urls) {
#   download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
# 1. for loop over named
# 2. as apply as inline function
# 3. tidy piped version tat combines url generation & dwnld
# ANS: lapply(date_range, make_url) %>%
#lapply(function(u) {download.file(u, destfile = paste0(outdir, str_sub(u, -11)))})
result <- lapply(urls, function (u) {
download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
})
# # manual run #
# # params
start = "11/2018"
end = "4/2019"
#
get_data(start, end)
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/")
# if no end date given, set to now
end <- ifelse(is.null(end), format(now(), "%m/%Y"), end)
# takes start & end in mm/yyyy, tries to dwnld files
# make url func only avail within get_data
make_url <- function(date) {
urls <- paste0(base_url, format(date, "%Y_%m"), ".csv")
return(urls)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
end_date <- lubridate::myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
#lapply (a,b) just applies func b to seq a and returns list
# of the modififed sequence
urls <- lapply(date_range, make_url, base_url=base_url)
# for loops can be easier for early development
# u can be any letter, x or first letter common
# for(u in urls) {
#   download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
# 1. for loop over named
# 2. as apply as inline function
# 3. tidy piped version tat combines url generation & dwnld
# ANS: lapply(date_range, make_url) %>%
#lapply(function(u) {download.file(u, destfile = paste0(outdir, str_sub(u, -11)))})
result <- lapply(urls, function (u) {
download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
})
# # manual run #
# # params
start = "11/2018"
end = "4/2019"
#
get_data(start, end)
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/")
# if no end date given, set to now
end <- ifelse(is.null(end), format(now(), "%m/%Y"), end)
# takes start & end in mm/yyyy, tries to dwnld files
# make url func only avail within get_data
make_url <- function(date) {
urls <- paste0(base_url, format(date, "%Y_%m"), ".csv")
return(urls)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
end_date <- lubridate::myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
#lapply (a,b) just applies func b to seq a and returns list
# of the modififed sequence
urls <- lapply(date_range, make_url)
# for loops can be easier for early development
# u can be any letter, x or first letter common
# for(u in urls) {
#   download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
# 1. for loop over named
# 2. as apply as inline function
# 3. tidy piped version tat combines url generation & dwnld
# ANS: lapply(date_range, make_url) %>%
#lapply(function(u) {download.file(u, destfile = paste0(outdir, str_sub(u, -11)))})
result <- lapply(urls, function (u) {
download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
})
# # manual run #
# # params
start = "11/2018"
end = "4/2019"
#
get_data(start, end)
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/")
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/") {
# if no end date given, set to now
end <- ifelse(is.null(end), format(now(), "%m/%Y"), end)
# takes start & end in mm/yyyy, tries to dwnld files
# make url func only avail within get_data
make_url <- function(date) {
urls <- paste0(base_url, format(date, "%Y_%m"), ".csv")
return(urls)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
end_date <- lubridate::myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
#lapply (a,b) just applies func b to seq a and returns list
# of the modififed sequence
urls <- lapply(date_range, make_url)
# for loops can be easier for early development
# u can be any letter, x or first letter common
# for(u in urls) {
#   download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
# 1. for loop over named
# 2. as apply as inline function
# 3. tidy piped version tat combines url generation & dwnld
# ANS: lapply(date_range, make_url) %>%
#lapply(function(u) {download.file(u, destfile = paste0(outdir, str_sub(u, -11)))})
result <- lapply(urls, function (u) {
download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
})
}
# # manual run #
# # params
start = "11/2018"
end = "4/2019"
#
get_data(start, end)
get_data <- function(start, end,
base_url="https://s3.amazonaws.com/biketown-tripdata-public/",
outdir="data/") {
# if no end date given, set to now
end <- ifelse(is.null(end), format(now(), "%m/%Y"), end)
# takes start & end in mm/yyyy, tries to dwnld files
# make url func only avail within get_data
make_url <- function(date) {
urls <- paste0(base_url, format(date, "%Y_%m"), ".csv")
return(urls)
}
# parse date range
start_date <- lubridate::myd(start, truncated = 2)
end_date <- lubridate::myd(end, truncated = 2)
date_range <- seq(start_date, end_date, by="months")
#lapply (a,b) just applies func b to seq a and returns list
# of the modififed sequence
urls <- lapply(date_range, make_url)
# for loops can be easier for early development
# u can be any letter, x or first letter common
# for(u in urls) {
#   download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
# 1. for loop over named
# 2. as apply as inline function
# 3. tidy piped version tat combines url generation & dwnld
# ANS: lapply(date_range, make_url) %>%
#lapply(function(u) {download.file(u, destfile = paste0(outdir, str_sub(u, -11)))})
print (urls)
result <- lapply(urls, function (u) {
download.file(u, destfile = paste0(outdir, str_sub(u, -11)))
})
}
#
get_data(start, end)
source("plot/fetch_biketown.R")
source("fetch_biketown.R")
get_data(start = "09/2018", end = "10/2018")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
str(biketownjul18)
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
```{r biketown, echo = F}
```{r biketown, include=F}
```{r biketown, include = F}
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
mean(biketownjul18$Distance_Miles)
avg_dis_by_sub <- biketownjul18 %>%
group_by(biketownjul18$PaymentPlan) %>%
mean(biketownjul18$Distance_Miles)
avg_dis_by_sub <- biketownjul18 %>%
group_by(biketownjul18$PaymentPlan)
View(avg_dis_by_sub)
avg_dis_by_sub <- biketownjul18 %>%
summarise(biketownjul18$PaymentPlan)
summarise(mean_dist = mean(biketownjul18$Distance_Miles )
avg_dis_by_sub <- biketownjul18 %>%
avg_dis_by_sub <- biketownjul18 %>%
summarise(mean_dist = mean(biketownjul18$Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
summarise(mean_dist = mean(biketownjul18$Distance_Miles))
View(avg_dis_by_sub)
avg_dis_by_sub <- biketownjul18 %>%
summarise(mean_dist = mean(biketownjul18$Distance_Miles), biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
summarise(mean_dist = mean(biketownjul18$Distance_Miles), biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
summarise(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
summarise(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
select(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
select(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
select(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
table(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
avg_dis_by_sub <- biketownjul18 %>%
table(biketownjul18$Distance_Miles, biketownjul18$PaymentPlan)
summarise(mean_dist = mean(biketownjul18$Distance_Miles)
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
summarise(mean_dist = mean(Distance_Miles)
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F) %>%
str(biketownjul18) %>%
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
select(PaymentPlan, Distance_Miles) %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
#biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
#str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
select(PaymentPlan, Distance_Miles) %>%
group_by(PaymentPlan) %>%
summarise(mean_dist=mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
View(avg_dis_by_sub)
avg_dis_fig
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean.dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean.dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_fig
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_fig
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_fig
avg_dis_fig
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
library(tidyr)
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_fig
```{r biketown, include=FALSE}
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
biketownjul18 <- read.csv("data/2018_07.csv", stringsAsFactors = F)
str(biketownjul18)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dist = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dist, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
install.packages(DT)
?mean
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
install.packages(
library(tidyr)
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dm = mean(Distance_Miles))
avg_dis_fig <- biketownjul18 %>%
ggplot(aes(x = PaymentPlan, y = mean_dm, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity")
avg_dis_fig
avg_dis_by_sub <- biketownjul18 %>%
group_by(PaymentPlan) %>%
summarise(mean_dm = mean(Distance_Miles))
avg_dis_fig <- avg_dis_by_sub %>%
ggplot(aes(x = PaymentPlan, y = mean_dm, fill=PaymentPlan)) + # need ot use + in gg
geom_bar(stat = "identity") #to show value, therwise will get count of
avg_dis_fig
avg_dis_fig
datatable(avg_dis_by_sub, options = list(
pagelength = 15),
caption - 'Table 1: Table of values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15),
caption - 'Table 1: Table of values')
library(DT)
install.packages(DT)
install.packages("data.table")
library(data.table)
datatable(avg_dis_by_sub, options = list(
pagelength = 15),
caption - 'Table 1: Table of values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15),
caption - 'Table 1: Table of Values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
datatable(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
data_table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
install.packages(kable)
install.packages("kableExtra")
library(kableExtra)
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
datatable(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
?kable
install.packages("knitr")
install.packages("knitr")
library(knitr)
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
data.table(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
datatable(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
datatable(avg_dis_by_sub, options = list(
pagelength = 15), caption - 'Table 1: Table of Values')
kable(avg_dis_by_sub, options = list(
pagelength = 15), caption - 'Table 1: Table of Values')
kable(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
str(biketownjul18)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
install.packages("data.table")
library(data.table)
install.packages("kableExtra")
library(kableExtra)
library(knitr)
install.packages("kableExtra")
install.packages("data.table")
install.packages("data.table")
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
install.packages("data.table")
library(data.table)
install.packages("kableExtra")
library(kableExtra)
library(knitr)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
install.packages("kableExtra")
library(kableExtra)
library(knitr)
> library(tidyr)
> library(tidyr)
knitr::opts_chunk$set(echo = FALSE)
> library(dplyr)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
knitr::kable(avg_dis_by_sub, options = list(
pagelength = 15), caption = 'Table 1: Table of Values')
