# define a fucntion that laods excel sheets
load_data <- function(bridge_name, input_file) {
bike_counts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>% #skip header columns
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) #drops useless time
}
h <-  load_data("Hawthorne", input_file)
load_data <- function(bridge_name, input_file) {
bike_counts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>% #skip header columns
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) #drops useless time
}
h <-load_data("Hawthorne", input_file)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
# define a fucntion that laods excel sheets
load_data <- function(bridge_name, input_file) {
bike_counts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>% #skip header columns
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) #drops useless time
}
h <-load_data("Hawthorne", input_file)
h <-load_data("Hawthorne",input_file)
h <-load_data("Hawthorne",input_file)
h <-load_data("Hawthorne",input_file)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
# define a fucntion that laods excel sheets
load_data <- function(bridge_name, input_file) {
bike_counts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>% #skip header columns
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) #drops useless time
}
h <-load_data("Hawthorne",input_file)
head(h)
View(h)
bikecounts <- lapply(bridge_names, load_data,
input_file = input_file) %>%
bind_rows()
head(bikecounts)
View(bikecounts)
# factorize bridge name
bikecounts <- bikecounts %>% mutate(bridge = factor(bridge))
View(bikecounts)
# read in weather data
weather <- read_csv("data/NCDC-CDO-USC00356750.csv")
head(weather)
source("code/bridge_code.R")
source("code/bridge_code.R")
# read in weather data
weather <- read_csv("data/NCDC-CDO-USC00356750.csv")
source("code/bridge_code.R")
library(purrr)
library(lubridate)
library(ggplot2)
library(modelr)
library(purrr)
library(broom)
bikecounts_wx <- bikecounts %>%
left_join(weather, by = c("date" = "DATE")) %>%
select(date, bridge, total, TMIN, TMAX, PRCP)
View(bikecounts_wx)
library(dplyr)
geom_line()
ggplot(bikecounts_wx, aes(x = date, y = total, group = bridge, color = bridge)) +
geom_line()
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bikecounts_wx$bridge)
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge)
# or facet_wrap(bridge ~ .) for bridge against no other option, vertical charts
# or facet_grid(bridge ~ .) for horizontal charts
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge)
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge)
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge) + ylim (c, 0, 10000))
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge)
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bridge ~ .)
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge) #vertical charts
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge) + ylim(c(0,10000)) #vertical charts
bikecounts_wx %>%
group_by(bridge) %>%
summarise(avg_daily_counts = mean(total))
bikecounts_wx %>%
group_by(bridge, month(date)) %>%
summarise(avg_month_counts = mean(total)) %>%
View()
# daily avg by month all time by bridge
bikecounts_wx %>%
group_by(bridge, month(date, label = T)) %>%
summarise(avg_month_counts = mean(total))
# daily avg by month all time by bridge
bikecounts_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarise(avg_month_counts = mean(total)) %>%
as.data.frame()
ggplot(avg_monthy, aes(x = month, y = avg_month_counts,
color = bridge)) +
geom_point(size = 2)
ggplot(avg_monthly, aes(x = month, y = avg_month_counts,
color = bridge)) +
geom_point(size = 2)
ggplot(avg_month_counts, aes(x = month, y = avg_month_counts,
color = bridge)) +
geom_point(size = 2)
# daily avg by month all time by bridge
bikecounts_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarise(avg_month_counts = mean(total)) %>%
as.data.frame()
ggplot(avg_month_counts, aes(x = month, y = avg_month_counts,
color = bridge)) +
geom_point(size = 2)
ggplot(avg_month_counts, aes(x = month, y = avg_month_counts, color = bridge)) +
geom_point(size = 2)
# avg daily count by bridge
bikecounts_wx %>%
group_by(bridge) %>%
summarise(avg_daily_counts = mean(total))
# avg month count by bridge year
bikecounts_wx %>%
group_by(bridge, month(date)) %>%
summarise(avg_month_counts = mean(total)) %>%
View()
# daily avg by month all time by bridge
bikecounts_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarise(avg_month_counts = mean(total)) %>%
as.data.frame()
str(avg_month_counts)
# daily avg by month all time by bridge
avg_month_counts <- bikecounts_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarise(avg_month_counts = mean(total)) %>%
as.data.frame()
str(avg_month_counts)
ggplot(avg_month aes(x = month, y = avg_month_counts, color = bridge)) +
ggplot(avg_month_counts, aes(x = month, y = avg_month_counts, color = bridge)) +
geom_point(size = 2)
# models return list objects describing fit
fit <- lm(total ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx)
View(fit)
summary(fit)
plot(fit)
fit2 <- lm(log(total) ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx)
View(fit2)
summary(fit2)
plot(fit2)
fit2 <- lm(log(total) ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx) %>%
summary(fit2)
lm(log(total) ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx) %>%
summary(fit2)
lm(log(total) ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx) %>%
summary()
summary(fit_poly)
summary(fit_poly)
fit_poly <- lm(log(total) ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx)
summary(fit_poly)
coef(fit_poly) # could access coefs here by name or position
fit_poly <- lm(log(total) ~ TMIN + TMAX + I(TMAX^2) + PRCP + bridge, data = bikecounts_wx)
summary(fit_poly)
f <- function(x) {198 * x + -0.99 * x^2}
p <- ggplot(data = data.frame(x = 0, ), mapping = aes(x = x))
p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
p + stat_function(fun = f, color = "lightblue", size=2) +
xlim(0,110)
p + stat_function(fun = f, color = "lightblue", size=2) +
xlim(0,110) + xlab("deg F") + ylab("count")
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred)
head(bikecounts_wx)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total), color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred), color = "blue") +
facet_grid(bridge ~ .)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total), color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred), color = "blue") +
facet_grid(bridge ~ .)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ .) +
ylim (c(0,10000))
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ .) +
ylim (c(0,10000))
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
facet_grid(bridge ~ ., scales = "free") # free removes constraint
facet_grid(bridge ~ ., scales = "free") # free removes constraint
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
library(tidyr)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
bw_nested <- bikecounts_wx %>%
group_by(bridge) %>%
nest()
str(bw_nested)
View(bw_nested)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") +
geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
View(bikecounts_wx)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") + geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
fit <- lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bw_nested [[1, "data"]]) %>%
summary()
fit <- lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bw_nested [[2, "data"]]) %>%
summary()
fit <- lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested [[2, "data"]]) %>%
summary()
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
head(bikecounts_wx)
bikecounts_wx_2 <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") + geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") + geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecounts_wx)
ggplot() +
geom_line(data = bikecounts_wx, aes (x = date, y = total),
color = "salmon") + geom_line(data = bikecounts_wx, aes (x = date, y = pred), # pred value not displaying
color = "blue") +
facet_grid(bridge ~ ., scales = "free") # free removes constraint
fit_func <- function(df) {
lm(total ~ TMIN + TMAX + PRCP,
data = df)
}
fit_func(bw_nested [[1, "data"]])
# two at a time
fits <- purrr::map(bw_nested$data[1:2], fit_func)
View(fits)
head(fits)
str(fits)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid) %>%
head(bikecounts_wx)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred)
bikecounts_wx <- bikecounts_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(resid = resid, pred = pred)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
library(modelr)
library(purrr)
library(broom)
library(tidyr)
source("code/bridge_code.R")
bikecounts_wx <- bikecounts %>%
left_join(weather, by = c("date" = "DATE")) %>%
select(date, bridge, total, TMIN, TMAX, PRCP)
ggplot(bikecounts_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bikecounts_wx$bridge) + ylim(c(0,10000)) #vertical charts
# or facet_wrap(bridge ~ .) for bridge against no other option, horizontal charts
# or facet_grid(bridge ~ .) for horizontal charts
# avg daily count by bridge
bikecounts_wx %>%
group_by(bridge) %>%
summarise(avg_daily_counts = mean(total))
# avg month count by bridge year
bikecounts_wx %>%
group_by(bridge, month(date)) %>%
summarise(avg_month_counts = mean(total)) %>%
View()
# daily avg by month all time by bridge
avg_month_counts <- bikecounts_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarise(avg_month_counts = mean(total)) %>%
as.data.frame()
str(avg_month_counts)
# use aggregate for more complex
# group by and summarize can be messy
#cannot pipe to ggplot, so use as.data.frame
ggplot(avg_month_counts, aes(x = month, y = avg_month_counts, color = bridge)) +
geom_point(size = 2)
# models return list objects describing fit
fit <- lm(total ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx)
summary(fit)
plot(fit)
fit2 <- lm(log(total) ~ TMIN + TMAX + PRCP + bridge, data = bikecounts_wx)
summary(fit2)
plot(fit2)
fit_poly <- lm(log(total) ~ TMIN + TMAX + I(TMAX^2) + PRCP + bridge, data = bikecounts_wx)
summary(fit_poly)
coef(fit_poly) # could access coefs here by name or position
f <- function(x) {198 * x + -0.99 * x^2} #from regression result
p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
p + stat_function(fun = f, color = "lightblue", size=2) +
xlim(0,110) + xlab("deg F") + ylab("count")
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
bw_nested <- bikecounts_wx %>%
group_by(bridge) %>%
nest()
str(bw_nested)
View(bw_nested)
fit <- lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested [[1, "data"]]) %>%
summary()
fit_func <- function(df) {
lm(total ~ TMIN + TMAX + PRCP,
data = df)
}
# one at a time via function
fit_func(bw_nested [[1, "data"]])
# two at a time
fits <- purrr::map(bw_nested$data[1:2], fit_func)
str(fits)
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
head(bw_nested)
#unpack or combine results
broom::tidy(bw_nested$fit[[1]])
#unpack for all 3
bw_nested %>%
unnest(glance) %>%
arrange(desc(r.squared))
